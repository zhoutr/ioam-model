<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-zhou-ippm-ioam-yang-02" ipr="trust200902">
  <front>
    <title abbrev="YANG Model for IOAM">A YANG Data Model for In-Situ
    OAM</title>

    <author fullname="Tianran Zhou" initials="T." surname="Zhou, Ed.">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>156 Beiqing Rd.</street>

          <city>Beijing</city>

          <code>100095</code>

          <region/>

          <country>China</country>
        </postal>

        <email>zhoutianran@huawei.com</email>
      </address>
    </author>

    <author fullname="Jim Guichard" initials="J." surname="Guichard">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <region/>

          <country>United States of America</country>
        </postal>

        <email>james.n.guichard@huawei.com</email>
      </address>
    </author>

    <author fullname="Frank Brockners" initials="F." surname="Brockners">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>Hansaallee 249, 3rd Floor</street>

          <city>Duesseldorf</city>

          <region>Nordrhein-Westfalen</region>

          <code>40549</code>

          <country>Germany</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>fbrockne@cisco.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Srihari Raghavan" initials="S." surname="Raghavan">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>Tril Infopark Sez, Ramanujan IT City</street>

          <street>Neville Block, 2nd floor, Old Mahabalipuram Road</street>

          <city>Chennai</city>

          <region>Tamil Nadu</region>

          <code>600113</code>

          <country>India</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>srihari@cisco.com</email>

        <uri/>
      </address>
    </author>

    <date day="02" month="July" year="2018"/>

    <workgroup>IPPM</workgroup>

    <abstract>
      <t>In-situ Operations, Administration, and Maintenance (IOAM) records
      operational and telemetry information in user packets while the packets
      traverse a path between two points in the network. This document defines
      a YANG module for the IOAM function.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>In-situ Operations, Administration, and Maintenance (IOAM) <xref
      target="I-D.ietf-ippm-ioam-data"/> records OAM information within user
      packets while the packets traverse a network. The data types and data
      formats for IOAM data records have been defined in <xref
      target="I-D.ietf-ippm-ioam-data"/>. The IOAM data can be embedded in
      many protocol encapsulations such as <xref
      target="I-D.brockners-inband-oam-transport">Network Services Header,
      Segment Routing, and IPv6</xref>.</t>

      <t>This document defines a data model for IOAM capabilities using the
      <xref target="RFC7950">YANG data modeling language</xref>. This YANG
      model supports all the three categories of IOAM data, which are Tracing
      Option, Proof of Transit Option, and Edge-to-Edge Option.</t>

      <section title="Tree Diagrams">
        <t>The meaning of the symbols in these diagrams is as follows:</t>

        <t><list style="symbols">
            <t>Brackets "[" and "]" enclose list keys.</t>

            <t>Curly braces "{" and "}" contain names of optional features
            that make the corresponding node conditional.</t>

            <t>Abbreviations before data node names: "rw" means configuration
            (read-write), "ro" state data (read-only).</t>

            <t>Symbols after data node names: "?" means an optional node, "!"
            a container with presence, and "*" denotes a "list" or
            "leaf-list".</t>

            <t>Parentheses enclose choice and case nodes, and case nodes are
            also marked with a colon (":").</t>

            <t>Ellipsis ("...") stands for contents of subtrees that are not
            shown.</t>
          </list></t>
      </section>
    </section>

    <section title="Design of the IOAM YANG Data Model">
      <t/>

      <section title="Profiles">
        <t>The IOAM model is organized as list of profiles as shown in the
        following figure. Each profile associates with one flow and the
        corresponding IOAM information.</t>

        <t><figure>
            <artwork><![CDATA[module: ietf-ioam
   +--rw ioam
      +--rw ioam-profiles
         +--rw admin-config
         |  +--rw enabled?   boolean
         +--rw ioam-profile* [profile-name]
            +--rw profile-name                    string
            +--rw filter
            |  +--rw filter-type?   ioam-filter-type
            |  +--rw acl-name?      -> /acl:acls/acl/name
            +--rw protocol-type?                  ioam-protocol-type
            +--rw incremental-tracing-profile {incremental-trace}?
            |  ...
            +--rw preallocated-tracing-profile {preallocated-trace}?
            |  ...
            +--rw pot-profile {proof-of-transit}?
            |  ...
            +--rw e2e-profile {edge-to-edge}?
               ...]]></artwork>
          </figure></t>

        <t>The "enabled" is an administrative configuration. When it is set to
        true, IOAM configuration is enabled for the system. Meanwhile, the
        IOAM data-plane functionality is enabled.</t>

        <t>The "filter" is used to identify a flow, where the IOAM profile can
        apply. There may be multiple filter types. ACL is the default one.</t>

        <t>The IOAM data can be encapsulated into multiple protocols, e.g.,
        <xref target="RFC8200">IPv6</xref>, <xref
        target="I-D.ietf-nvo3-geneve">Geneve</xref>,<xref
        target="I-D.ietf-nvo3-vxlan-gpe">VxLAN-GPE</xref>. The "protocol-type"
        is used to indicate where the IOAM is applied. For example, if the
        "protocol-type" is IPv6, the IOAM ingress node will encapsulate the
        associated flow with the <xref
        target="I-D.brockners-inband-oam-transport">IPv6-IOAM</xref>
        format.</t>

        <t>IOAM data includes three usage options with four encapsulation
        types, i.e., incremental tracing data, preallocated tracing data,
        prove of transit data and end to end data. In practice, multiple IOAM
        data types can be encapsulated into the same IOAM header. The
        "ioam-profile" contains a set of sub-profiles, each of which relates
        to one encapsulation type. The configured object may not support all
        the sub-profiles. The supported sub-profiles are indicated by 4
        defined features, i.e., "incremental-trace", "preallocated-trace",
        "proof-of-transit", "edge-to-edge".</t>
      </section>

      <section title="Preallocated Tracing Profile">
        <t>The IOAM tracing data is expected to be collected at every node
        that a packet traverses to ensure visibility into the entire path a
        packet takes within an IOAM domain. The preallocated tracing option
        will create pre-allocated space for each node to populate its
        information . The "preallocated-tracing-profile" contains the detailed
        information for the preallocated tracing data. The information
        includes:</t>

        <t><list style="symbols">
            <t>enabled: indicates whether the preallocated tracing profile is
            enabled.</t>

            <t>node-action: indicates the operation (e.g., encapsulate IOAM
            header, transit the IOAM data, or decapsulate IOAM header) applied
            to the dedicated flow.</t>

            <t>trace-type: indicates the per-hop data to be captured by the
            IOAM enabled nodes and included in the node data list.</t>

            <t>Loopback mode is used to send a copy of a packet back towards
            the source.</t>
          </list><figure align="center">
            <artwork><![CDATA[+--rw preallocated-tracing-profile {preallocated-trace}?
   +--rw enabled?                boolean
   +--rw node-action?            ioam-node-action
   +--rw trace-type?             ioam-trace-types
   +--rw enable-loopback-mode?   boolean]]></artwork>
          </figure></t>
      </section>

      <section title="Incremental Tracing Profile">
        <t>The incremental tracing option contains a variable node data fields
        where each node allocates and pushes its node data immediately
        following the option header. The "incremental-tracing-profile"
        contains the detailed information for the incremental tracing data.
        The detailed information is the same as the Preallocated Tracing
        Profile, but with one more variable, "max-length", which restricts the
        length of the IOAM header.</t>

        <t><figure align="center">
            <artwork><![CDATA[+--rw incremental-tracing-profile {incremental-trace}?
   +--rw enabled?                boolean
   +--rw node-action?            ioam-node-action
   +--rw trace-type?             ioam-trace-types
   +--rw enable-loopback-mode?   boolean
   +--rw max-length?             uint32]]></artwork>
          </figure></t>
      </section>

      <section title="Proof of Transit Profile">
        <t>The IOAM Proof of Transit data is to support the path or service
        function chain verification use cases. The "pot-profile" contains the
        detailed information for the prove of transit data. The detailed
        information are described in <xref
        target="I-D.brockners-proof-of-transit"/>.</t>

        <t><figure align="center">
            <artwork><![CDATA[+--rw pot-profile {proof-of-transit}?
   +--rw enabled?                boolean
   +--rw active-profile-index?   pot:profile-index-range
   +--rw pot-profile-list* [pot-profile-index]
      +--rw pot-profile-index    profile-index-range
      +--rw prime-number         uint64
      +--rw secret-share         uint64
      +--rw public-polynomial    uint64
      +--rw lpc                  uint64
      +--rw validator?           boolean
      +--rw validator-key?       uint64
      +--rw bitmask?             uint64]]></artwork>
          </figure></t>
      </section>

      <section title="Edge to Edge Profile">
        <t>The IOAM edge to edge option is to carry data that is added by the
        IOAM encapsulating node and interpreted by IOAM decapsulating node.
        The "e2e-profile" contains the detailed information for the edge to
        edge data. The detailed information includes:</t>

        <t><list style="symbols">
            <t>enabled: indicates whether the edge to edge profile is
            enabled.</t>

            <t>node-action is the same semantic as in Section 2.2.</t>

            <t>e2e-type indicates data to be carried from the ingress IOAM
            node to the egress IOAM node.</t>
          </list><figure align="center">
            <artwork><![CDATA[+--rw e2e-profile {edge-to-edge}?
   +--rw enabled?                boolean
   +--rw node-action?   ioam-node-action
   +--rw e2e-type?      ioam-e2e-types]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="IOAM YANG Module">
      <t/>

      <t><figure>
          <artwork><![CDATA[<CODE BEGINS> file "ietf-ioam@2018-07-02.yang"
module ietf-ioam {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ioam";
  prefix "ioam";
  import ietf-pot-profile {
    prefix "pot";
  }
  
  import ietf-access-control-list {
    prefix "acl";
  }
  
  organization 
    "IETF IPPM (IP Performance Metrics) Working Group";
    
  contact
    "WG Web: <http://tools.ietf.org/wg/ippm>
     WG List: <ippm@ietf.org>
     Editor: zhoutianran@huawei.com";

  description
    "This YANG module specifies a vendor-independent data
     model for the in Situ OAM (iOAM).";    

  revision 2018-07-02 {
    description "Initial revision.";
    reference "draft-zhou-ippm-ioam-yang";
  }

 /*
  * FEATURES
  */
  
  feature incremental-trace
  {
    description 
      "This feature indicated that the incremental tracing mode is 
       supported";
  }
  
  feature preallocated-trace
  {
    description 
      "This feature indicated that the preallocated tracing mode is 
       supported";
  }
  
  feature proof-of-transit
  {
    description 
      "This feature indicated that the proof of transit mode is 
       supported";
  }
  
  feature edge-to-edge
  {
    description 
      "This feature indicated that the edge to edge mode is 
       supported";
  }
  
 /*
  * IDENTITIES
  */  
  identity base-filter {
    description
      "Base identity to represent a filter. A filter is used to
      specify the flow to apply the iOAM profile. ";
  }
  
  identity acl-filter {
    base base-filter;
    description
      "Apply ACL rule to specify the flow.";
  }
  
  identity base-protocol {
    description
      "Base identity to represent the carrier protocol. It's used to
       indicate what layer and protocol the iOAM data is embedded.";
  }
  
  identity ipv6-protocol {
    base base-protocol;
    description
      "The described iOAM data is embedded in ipv6 protocol.";
  }
  
  identity base-node-action {
    description
      "Base identity to represent the node actions. It's used to
       indicate what action the node will take.";
  }
  
  identity encapsulate {
    base base-node-action;
    description
      "indicate the node is to encapsulate the iOAM packet";
  } 
  
  identity transit {
    base base-node-action;
    description
      "indicate the node is to transit the iOAM packet";
  }

  identity decapsulate {
    base base-node-action;
    description
      "indicate the node is to decapsulate the iOAM packet";
  }
  
 /*
  * TYPE DEFINITIONS
  */
  
  typedef ioam-filter-type {
    type identityref {
      base base-filter;
    }
    description
      "Specifies a known type of filter.";
  }
  
  typedef ioam-protocol-type {
    type identityref {
      base base-protocol;
    }
    description
      "Specifies a known type of carrier protocol for the iOAM data.";
  }
  
  typedef ioam-node-action {
    type identityref {
      base base-node-action;
    }
    description
      "Specifies a known type of node action.";
  }
  
  typedef ioam-trace-types {            
    type bits {
      bit ioam-hop-lim-node-id {
        position 0;
        description
          "When set indicates presence of Hop_Lim and node_id in the
          node data.";
      }
      bit ioam-if-id {
        position 1;
        description
          "When set indicates presence of ingress_if_id and
          egress_if_id in the node data.";
      }
      bit ioam-timestamp-seconds {
        position 2;
        description
          "When set indicates presence of time stamp seconds in the
          node data.";
      }
      bit ioam-timestamp-nanoseconds {
        position 3;
        description
          "When set indicates presence of time stamp nanoseconds in 
          the node data.";
      }
      bit ioam-transit-delay {
        position 4;
        description
          "When set indicates presence of transit delay in the node
          data.";
      }
      bit ioam-app-data {
        position 5;
        description
          "When set indicates presence of app_data in the node data.";
      }
      bit ioam-queue-depth {
        position 6;
        description
          "When set indicates presence of queue depth in the node
          data.";
      }
      bit ioam-opaque-state-snapshot {
        position 7;
        description
          "When set indicates presence of variable length Opaque 
          State Snapshot field.";
      }
      bit ioam-hop-lim-node-id-wide {
        position 8;
        description
          "When set indicates presence of Hop_Lim and node_id wide 
           in the node data.";
      }
      bit ioam-if-id-wide {
        position 9;
        description
          "When set indicates presence of ingress_if_id and
          egress_if_id wide in the node data.";
      }
      bit app-data-wide {
        position 10;
        description
          "When set indicates presence of app_data wide in the node
          data.";
      }
    }
    description
      "A 16-bit identifier which specifies which data types are used
       in this node data list.";    
  }
  
  typedef ioam-pot-types {             
    type bits {
      bit ioam-bytes-16 {
        position 0;
        description
          "POT data is a 16 Octet field";
      }
    }
    description
      "7-bit identifier of a particular POT variant that dictates
        the POT data that is included.";
  }
    
  typedef ioam-e2e-types {        
    type bits {
      bit ioam-seq-num {
        position 0;
        description
          "A 64-bit sequence number added to a specific tube which is
           used to identify packet loss and reordering for that 
           tube.";
      }
    }
    description
      "8-bit identifier of a particular in situ OAM E2E variant.";
  }
 
 /*
  * GROUP DEFINITIONS
  */
   
  grouping ioam-filter {
    description "A grouping for iOAM filter definition";
    
    leaf filter-type {
      type ioam-filter-type;
      description "filter type";
    }
    
    leaf acl-name {
      when "../filter-type = 'acl-filter'";
      type leafref {
        path "/acl:acls/acl:acl/acl:name";
      }
      description "Access Control List name.";
    }
  }
  
  grouping ioam-incremental-tracing-profile {   
    description
      "A grouping for incremental tracing profile.";
    
    leaf node-action {
      type ioam-node-action;
      description "node action";
    }

    leaf trace-type {
      when "../node-action = 'encapsulate'";
      type ioam-trace-types;
      description
        "The trace type is only defined at the encapsulation node.";
    }
    
    leaf enable-loopback-mode {
      when "../node-action = 'encapsulate'";
      type boolean;
      default false;
      description
        "Loopback mode is used to send a copy of a packet back towards
        the source. The loopback mode is only defined at the
        encapsulation node.";
    }
    
    leaf max-length {
      when "../node-action = 'encapsulate'";
      type uint32;
      description
        "This field specifies the maximum length of the node data list
        in octets. The max-length is only defined at the
        encapsulation node. And it's only used for the incremental 
        tracing mode.";
    }
  }

  grouping ioam-preallocated-tracing-profile {   
    description
      "A grouping for incremental tracing profile.";
    
    leaf node-action {
      type ioam-node-action;
      description "node action";
    }

    leaf trace-type {
      when "../node-action = 'encapsulate'";
      type ioam-trace-types;
      description
        "The trace type is only defined at the encapsulation node.";
    }
    
    leaf enable-loopback-mode {
      when "../node-action = 'encapsulate'";
      type boolean;
      default false;
      description
        "Loopback mode is used to send a copy of a packet back towards
        the source. The loopback mode is only defined at the
        encapsulation node.";
    }
  }
  
  grouping ioam-e2e-profile {
    description
      "A grouping for tracing profile.";
    
    leaf node-action {
      type ioam-node-action;
      description
        "indicate how the node act for this profile";
    }
    
    leaf e2e-type {
      when "../node-action = 'encapsulate'";
      type ioam-e2e-types;
      description
        "The e2e type is only defined at the encapsulation node.";
    }
  }

  grouping ioam-admin-config {
    description
      "IOAM top-level administrative configuration.";

    leaf enabled {
      type boolean;
      default false;
      description
        "When true, IOAM configuration is enabled for the system.
         Meanwhile, the IOAM data-plane functionality is enabled.";
    }
  }

 /*
  * DATA NODES
  */
   
  container ioam {
    description "iOAM top level container";
                         
    container ioam-profiles {
      description
        "Contains a list of iOAM profiles.";

      container admin-config {
        description
          "Contains all the administrative configurations related to 
           the IOAM functionalities and all the IOAM profiles.";
       
        uses ioam-admin-config;
      }
        
      list ioam-profile {
        key "profile-name";
        ordered-by user;
        description
          "A list of iOAM profiles that configured on the node.";
        
        leaf profile-name {
          type string;
          mandatory true;
          description
            "Unique identifier for each iOAM profile";
        }
        
        container filter {
          uses ioam-filter;
          description
            "The filter which is used to indicate the flow to apply
            iOAM.";
        }
          
        leaf protocol-type {
          type ioam-protocol-type;
          description
            "This item is used to indicate the carrier protocol where
            the iOAM is applied.";
        }

        container incremental-tracing-profile {
          if-feature incremental-trace;
          description
            "describe the profile for incremental tracing option";

          leaf enabled {
            type boolean;
            default false;
            description
              "When true, apply incremental tracing option to the
               specified flow identified by the filter.";
          }

          uses ioam-incremental-tracing-profile;
        }

        container preallocated-tracing-profile {
          if-feature preallocated-trace;
          description
            "describe the profile for preallocated tracing option";

          leaf enabled {
            type boolean;
            default false;
            description
              "When true, apply preallocated tracing option to the
               specified flow identified by the following filter.";
          }

          uses ioam-preallocated-tracing-profile;
        }

        container pot-profile {
          if-feature proof-of-transit;
          description
            "describe the profile for pot option";

          leaf enabled {
            type boolean;
            default false;
            description
              "When true, apply Proof of Transit option to the
               specified flow identified by the following filter.";
          }
 
          leaf active-profile-index {
          type pot:profile-index-range;
          description
            "Proof of transit profile index that is currently
             active. Will be set in the first hop of the path
             or chain. Other nodes will not use this field.";
          }
          
          uses pot:pot-profile;
        }

        container e2e-profile {
          if-feature edge-to-edge;
          description
            "describe the profile for e2e option";
          
          leaf enabled {
            type boolean;
            default false;
            description
              "When true, apply End to end option to the
               specified flow identified by the following filter.";
          }
         
          uses ioam-e2e-profile;
        }
      }
    }
  }    
}
<CODE ENDS>]]></artwork>
        </figure></t>

      <t/>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC5246">TLS</xref>.</t>

      <t>The NETCONF <xref target="RFC6536">access control model</xref>
      provides the means to restrict access for particular NETCONF or RESTCONF
      users to a preconfigured subset of all available NETCONF or RESTCONF
      protocol operations and content.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t><list style="symbols">
          <t>/ioam/ioam-profiles/admin-config</t>
        </list></t>

      <t>The items in the container above include the top level administrative
      configurations related to the IOAM functionalities and all the IOAM
      profiles. Unexpected changes to these items could lead to the IOAM
      function disruption and/ or misbehavior of all the IOAM profiles.</t>

      <t><list style="symbols">
          <t>/ioam/ioam-profiles/ioam-profile</t>
        </list></t>

      <t>The entries in the list above include the whole IOAM profile
      configurations which indirectly create or modify the device
      configurations. Unexpected changes to these entries could lead to the
      mistake of the IOAM behavior for the corresponding flows.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>RFC Ed.: In this section, replace all occurrences of 'XXXX' with the
      actual RFC number (and remove this note).</t>

      <t>IANA is requested to assign a new URI from the <xref
      target="RFC3688">IETF XML Registry</xref>. The following URI is
      suggested:</t>

      <t><figure>
          <artwork align="left"><![CDATA[        URI: urn:ietf:params:xml:ns:yang:ietf-ioam
        Registrant Contact: The IESG.
        XML: N/A; the requested URI is an XML namespace.]]></artwork>
        </figure></t>

      <t>This document also requests a new YANG module name in the <xref
      target="RFC7950">YANG Module Names registry</xref> with the following
      suggestion:</t>

      <t><figure>
          <artwork align="left"><![CDATA[        name: ietf-ioam
        namespace: urn:ietf:params:xml:ns:yang:ietf-ioam
        prefix: ioam
        reference: RFC XXXX]]></artwork>
        </figure></t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>For their valuable comments, discussions, and feedback, we wish to
      acknowledge Greg Mirsky and Reshad Rahman.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.8200'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.5246'?>

      <?rfc include='reference.RFC.6536'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.ietf-ippm-ioam-data'?>

      <?rfc include='reference.I-D.ietf-nvo3-geneve'?>

      <?rfc include='reference.I-D.ietf-nvo3-vxlan-gpe'?>

      <?rfc include='reference.I-D.brockners-inband-oam-transport'?>

      <?rfc include='reference.I-D.brockners-proof-of-transit'?>
    </references>

    <section title="Examples">
      <t>TBD</t>
    </section>
  </back>
</rfc>
